##########################################################################################################################
# File automatically-generated by STM32forVSCode
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = keycard-pro


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/application_info.c \
Core/Src/crypto/address.c \
Core/Src/crypto/aes.c \
Core/Src/crypto/base32.c \
Core/Src/crypto/base58.c \
Core/Src/crypto/bignum.c \
Core/Src/crypto/bip32.c \
Core/Src/crypto/bip39.c \
Core/Src/crypto/bip39_english.c \
Core/Src/crypto/blake256.c \
Core/Src/crypto/blake2b.c \
Core/Src/crypto/blake2s.c \
Core/Src/crypto/cardano.c \
Core/Src/crypto/cash_addr.c \
Core/Src/crypto/chacha20poly1305/chacha20poly1305.c \
Core/Src/crypto/chacha20poly1305/chacha_merged.c \
Core/Src/crypto/chacha20poly1305/poly1305-donna.c \
Core/Src/crypto/chacha20poly1305/rfc7539.c \
Core/Src/crypto/chacha_drbg.c \
Core/Src/crypto/curves.c \
Core/Src/crypto/ecdsa.c \
Core/Src/crypto/ed25519-donna/curve25519-donna-32bit.c \
Core/Src/crypto/ed25519-donna/curve25519-donna-helpers.c \
Core/Src/crypto/ed25519-donna/curve25519-donna-scalarmult-base.c \
Core/Src/crypto/ed25519-donna/ed25519-donna-32bit-tables.c \
Core/Src/crypto/ed25519-donna/ed25519-donna-basepoint-table.c \
Core/Src/crypto/ed25519-donna/ed25519-donna-impl-base.c \
Core/Src/crypto/ed25519-donna/ed25519-keccak.c \
Core/Src/crypto/ed25519-donna/ed25519-sha3.c \
Core/Src/crypto/ed25519-donna/ed25519.c \
Core/Src/crypto/ed25519-donna/modm-donna-32bit.c \
Core/Src/crypto/groestl.c \
Core/Src/crypto/hasher.c \
Core/Src/crypto/hmac.c \
Core/Src/crypto/hmac_drbg.c \
Core/Src/crypto/memzero.c \
Core/Src/crypto/nem.c \
Core/Src/crypto/nist256p1.c \
Core/Src/crypto/pbkdf2.c \
Core/Src/crypto/rand.c \
Core/Src/crypto/rc4.c \
Core/Src/crypto/rfc6979.c \
Core/Src/crypto/ripemd160.c \
Core/Src/crypto/script.c \
Core/Src/crypto/secp256k1.c \
Core/Src/crypto/segwit_addr.c \
Core/Src/crypto/sha2.c \
Core/Src/crypto/sha3.c \
Core/Src/crypto/shamir.c \
Core/Src/crypto/slip39.c \
Core/Src/crypto/util.c \
Core/Src/iso7816/atr.c \
Core/Src/iso7816/pps.c \
Core/Src/iso7816/smartcard.c \
Core/Src/iso7816/t1.c \
Core/Src/keycard.c \
Core/Src/main.c \
Core/Src/pairing.c \
Core/Src/secure_channel.c \
Core/Src/stm32g0xx_hal_msp.c \
Core/Src/stm32g0xx_it.c \
Core/Src/system_stm32g0xx.c \
Core/Src/tlv.c \
Drivers/BSP/Components/hx8347d/hx8347d.c \
Drivers/BSP/STM32G0C1E-EV/stm32g0c1e_eval.c \
Drivers/BSP/STM32G0C1E-EV/stm32g0c1e_eval_lcd.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cryp.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cryp_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dac.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dac_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dma.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dma_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_exti.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_fdcan.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_gpio.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_i2c.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_i2c_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pcd.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pcd_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rcc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rcc_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rng.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rtc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rtc_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_smartcard.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_smartcard_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_spi.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_spi_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_tim.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_tim_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_adc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_dma.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_rcc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_spi.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_usb.c


CPP_SOURCES = \


# ASM sources
ASM_SOURCES =  \
startup_stm32g0c1xx.s



#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
POSTFIX = "
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
GCC_PATH="C:/DEV/BIN
ifdef GCC_PATH
CXX = $(GCC_PATH)/$(PREFIX)g++$(POSTFIX)
CC = $(GCC_PATH)/$(PREFIX)gcc$(POSTFIX)
AS = $(GCC_PATH)/$(PREFIX)gcc$(POSTFIX) -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy$(POSTFIX)
SZ = $(GCC_PATH)/$(PREFIX)size$(POSTFIX)
else
CXX = $(PREFIX)g++
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m0plus

# fpu
FPU = 

# float-abi
FLOAT-ABI = 

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DSTM32G0C1xx \
-DUSE_HAL_DRIVER


# CXX defines
CXX_DEFS =  \
-DSTM32G0C1xx \
-DUSE_HAL_DRIVER


# AS includes
AS_INCLUDES = \

# C includes
C_INCLUDES =  \
-ICore/Inc \
-ICore/Inc/crypto \
-ICore/Inc/crypto/chacha20poly1305 \
-ICore/Inc/crypto/ed25519-donna \
-ICore/Inc/iso7816 \
-IDrivers/BSP/Components/Common \
-IDrivers/BSP/Components/cbtl08gp053 \
-IDrivers/BSP/Components/hx8347d \
-IDrivers/BSP/Components/ina230 \
-IDrivers/BSP/Components/sn65dp141 \
-IDrivers/BSP/Components/ssd1315 \
-IDrivers/BSP/Components/st7735 \
-IDrivers/BSP/Components/stlm75 \
-IDrivers/BSP/Components/tusb546 \
-IDrivers/BSP/STM32G0C1E-EV \
-IDrivers/CMSIS/Device/ST/STM32G0xx/Include \
-IDrivers/CMSIS/Include \
-IDrivers/STM32G0xx_HAL_Driver/Inc \
-IDrivers/STM32G0xx_HAL_Driver/Inc/Legacy \
-IUtilities/Fonts



# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CXXFLAGS = $(MCU) $(CXX_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -feliminate-unused-debug-types

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf -ggdb
CXXFLAGS += -g -gdwarf -ggdb
endif

# Add additional flags
CFLAGS += 
ASFLAGS += 
CXXFLAGS += 

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CXXFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32G0C1VETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = \


# Additional LD Flags from config file
ADDITIONALLDFLAGS = -specs=nano.specs 

LDFLAGS = $(MCU) $(ADDITIONALLDFLAGS) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of cpp program objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of C objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.cpp STM32Make.make | $(BUILD_DIR) 
	$(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cxx STM32Make.make | $(BUILD_DIR) 
	$(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cxx=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.c STM32Make.make | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s STM32Make.make | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) STM32Make.make
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@

#######################################
# flash
#######################################
flash: $(BUILD_DIR)/$(TARGET).elf
	"C:/PROGRAMDATA/CHOCOLATEY/BIN/OPENOCD.EXE" -f ./openocd.cfg -c "program $(BUILD_DIR)/$(TARGET).elf verify reset exit"

#######################################
# erase
#######################################
erase: $(BUILD_DIR)/$(TARGET).elf
	"C:/PROGRAMDATA/CHOCOLATEY/BIN/OPENOCD.EXE" -f ./openocd.cfg -c "init; reset halt; stm32g0x mass_erase 0; exit"

#######################################
# clean up
#######################################
clean:
	cmd /c rd /s /q $(BUILD_DIR)

#######################################
# custom makefile rules
#######################################


	
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***